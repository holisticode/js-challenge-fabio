{"version":3,"sources":["providers/ThemeProvider.js","pages/start.js","pages/monitor.js","components/NavBar.js","store.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","type","primary","main","secondary","typography","fontFamily","useNextVariants","ThemeProvider","children","StartPage","props","Button","color","variant","href","Component","MonitorPage","useStyles","makeStyles","root","flexGrow","flex","display","alignItems","grow","alignSelf","NavBar","classes","className","AppBar","position","Toolbar","Container","Link","to","style","zIndex","src","alt","rootReducer","combineReducers","parameters","state","values","console","log","loggerMiddleware","createLogger","store","createStore","applyMiddleware","thunkMiddleware","App","path","exact","component","render","Boolean","window","location","hostname","match","ReactDOM","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2NAOMA,G,MAAQC,YAAe,CAC3BC,QAAS,CACPC,KAAM,OACNC,QAAS,CACPC,KAPU,WASZC,UAAW,CACTD,KATY,YAYhBE,WAAY,CACVC,WAAY,yBACZC,iBAAiB,MAQNC,EAJO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACpB,kBAAC,IAAD,CAAkBX,MAAOA,GAAQW,I,wECpBdC,E,YACnB,WAAYC,GAAQ,qEACZA,I,iKAUJ,OACE,6BACE,0EACA,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYC,KAAI,YAAhD,e,GAf6BC,aCClBC,E,YACnB,WAAYN,GAAQ,qEACZA,I,iKAUJ,OACE,6BACE,0EACA,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYC,KAAI,YAAhD,e,GAf+BC,a,wCCGnCE,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,GAEZC,KAAM,CACJC,QAAS,OACTC,WAAY,UAEdC,KAAM,CACJJ,SAAU,EACVK,UAAW,gBA+BAC,MA3Bf,YAA8B,EAAZlB,SAAa,IACvBmB,EAAUV,IAChB,OACE,yBAAKW,UAAWD,EAAQR,MACtB,kBAACU,EAAA,EAAD,CAAQC,SAAS,SAASlB,MAAM,WAC9B,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWJ,UAAWD,EAAQN,MAC5B,yBAAKO,UAAWD,EAAQH,MACtB,kBAACS,EAAA,EAAD,CAAMC,GAAG,KACP,yBACEC,MAAO,CAAEL,SAAU,WAAYM,OAAQ,GACvCC,IAAI,YACJC,IAAI,WAIV,yBAAKV,UAAWD,EAAQN,MACtB,kBAACV,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAQG,KAAK,uBAAb,gB,wBC/Bd,IAAMyB,EAAcC,YAAgB,CAClCC,WANF,WAAmD,IAA/BC,EAA8B,uDAAtB,GAAsB,yCAAVC,GAAU,EAAhB3C,KAAgB,EAAV2C,QAEtC,OADAC,QAAQC,IAAIF,GACLD,KAOHI,EAAmBC,yBAEZC,EAAQC,YACnBV,EACAW,YAAgBC,IAAiBL,ICOpBM,MAff,WACE,OACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,KAAK,IAAIC,OAAK,EAACC,UAAW9C,IACjC,kBAAC,IAAD,CAAO4C,KAAK,WAAWE,UAAWvC,IAClC,kBAAC,IAAD,CAAOwC,OAAQ,kBAAM,kBAAC,IAAD,CAAUtB,GAAG,aCLxBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASN,OACP,kBAAC,EAAD,KACE,kBAACO,EAAA,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.137b9802.chunk.js","sourcesContent":["import React from 'react'\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport 'typeface-ibm-plex-sans'\n\nconst primary = '#189518'\nconst secondary = '#67DE69'\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: primary,\n    },\n    secondary: {\n      main: secondary,\n    },\n  },\n  typography: {\n    fontFamily: '\"IBM Plex Sans\", Arial',\n    useNextVariants: true,\n  },\n})\n\nconst ThemeProvider = ({ children }) => (\n  <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\n)\n\nexport default ThemeProvider\n","import React, { Component } from 'react';\n\nimport Button from '@material-ui/core/Button'\n\nexport default class StartPage extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n  }\n\n  componentDidUpdate() {\n  }\n\n  render() {\n      return (\n        <div>\n          <h1>Fabio&amp;ss simple Ethereum real time monitor</h1>\n          <Button color=\"primary\" variant=\"contained\" href={`/monitor`}>Start!</Button>\n        </div>\n      )\n   }\n}\n","import React, { Component } from 'react';\n\nimport Button from '@material-ui/core/Button'\n\n\nexport default class MonitorPage extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n  }\n\n  componentDidUpdate() {\n  }\n\n  render() {\n      return (\n        <div>\n          <h1>Fabio&amp;ss simple Ethereum real time monitor</h1>\n          <Button color=\"primary\" variant=\"contained\" href={`/monitor`}>Start!</Button>\n        </div>\n      )\n   }\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Link from '@material-ui/core/Link'\nimport Button from '@material-ui/core/Button'\nimport Container from '@material-ui/core/Container'\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n  flex: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  grow: {\n    flexGrow: 1,\n    alignSelf: 'flex-start',\n  },\n})\n\nfunction NavBar({ children }) {\n  const classes = useStyles()\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Container className={classes.flex}>\n            <div className={classes.grow}>\n              <Link to=\"/\">\n                <img\n                  style={{ position: 'absolute', zIndex: 1 }}\n                  src=\"/logo.svg\"\n                  alt=\"Logo\"\n                />\n              </Link>\n            </div>\n            <div className={classes.flex}>\n              <Button></Button>\n              <Button href=\"https://aragone.one\">Github</Button>\n            </div>\n          </Container>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nexport default NavBar\n","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\n\nfunction parameters(state = {}, { type, values }) {\n  console.log(values);\n  return state;\n}\n\nconst rootReducer = combineReducers({\n  parameters,\n})\n\nconst loggerMiddleware = createLogger()\n\nexport const store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, loggerMiddleware)\n)\n","import React from 'react'\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\nimport StartPage from './pages/start'\nimport MonitorPage from './pages/monitor'\nimport { NavBar } from './components'\nimport { store } from './store'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <NavBar />\n        <Switch>\n          <Route path=\"/\" exact component={StartPage} />\n          <Route path=\"/monitor\" component={MonitorPage} />\n          <Route render={() => <Redirect to=\"/\" />} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport ThemeProvider from './providers/ThemeProvider'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <ThemeProvider>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}